#!/usr/bin/python
# -*- coding: utf-8 -*-

from os import path, urandom


class Config(object):
    DEBUG = False
    PORT = 5000
    HOST = '0.0.0.0'
    URL_PREFIX = '/api'
    PROJECT_ROOT = path.abspath(path.dirname(__file__))
    TEMPLATE_FOLDER = path.join(PROJECT_ROOT, 'templates')

    SQLALCHEMY_DATABASE_URI = "sqlite://"
    DATABASE_CONNECT_OPTIONS = {}

    SECURITY_TRACKABLE = True

    PBKDF2_ITERATIONS = 1
    UNKNOWN_USER_TIMEOUT = 0
    BUNDLE_ERRORS = True
    TRAP_HTTP_EXCEPTIONS = True


class Development(Config):
    DEBUG = True
    SECRET_KEY = 'development'
    PROJECT_SALT = 'dev salt'


class Production(Config):
    DEBUG = False
    TESTING = False

    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SECURE = True

    # =======================================================
    # = NB: USING URANDOM INVALIDATES ALL CURRENT SESSIONS! =
    # =======================================================
    # Generate a new random secret key
    SECRET_KEY = urandom(16)
    # =============================================================================================
    # =  NB! DO NOT CHANGE THIS IF YOU HAVE A RUNNING DATABASE - THIS WILL INVALIDATE ALL LOGIN!  =
    # =============================================================================================
    # Simple 64-bit string generated by os.urandom(8)
    PROJECT_SALT = '\xac\xf9\xc6\x96R\xc0\xa1\x05'

    # Note that 10000 is the recommended - but since we use peppers and want to login within reasonable time
    # this should be an acceptable trade-off
    PBKDF2_ITERATIONS = 8000
    pbkd2f = '''
import pbkdf2_ctypes

pbkdf2_ctypes.pbkdf2_bin(data="{:s}", salt="{:s}", iterations={:d})'''.format(
        'SomeLongAndSecurePasswordRightHere',
        '\xac\xf9\xc6\x96R\xc0\xa1\x05',
        PBKDF2_ITERATIONS
    )
    per_validation = 0.00837143301964
    # TODO: Run this on production server
    # per_validation = (timeit.timeit(pbkd2f, number=1000) / 1000)
    # print per_validation
    # The unknown user timeout is the average time per login attempt x the number of peppers,
    # i.e. timeout for as long as it would take to traverse and verify with all 256 peppers
    UNKNOWN_USER_TIMEOUT = per_validation * 256  # ~ 2 second


class Testing(Config):
    TESTING = True
    SECRET_KEY = 'testing'
    PROJECT_SALT = 'test salt'
